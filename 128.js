// 철수는 크라우드 펀딩을 이용한 프로젝트 투자 계획을 세우려 합니다. 철수가 투자하려는 프로젝트는 다음과 같은 특징을 가지고있습니다.

// 철수가 투자하려는 프로젝트는 최상위 프로젝트라고 부릅니다.
// 최상위 프로젝트는 여러개의 하위 프로젝트를 가질 수 있습니다.
// 2-1. 각각의 하위 프로젝트는 다시 여러개의 하위 프로젝트를 가질 수 있습니다.
// 2-2. 하위 프로젝트를 가지지 않는 프로젝트들을 최하위 프로젝트라고 부릅니다.
// 모든 하위 프로젝트와 최상위 프로젝트는 기대 이익값을 가지고있습니다.
// 위 특징에 맞춰 철수는 해당 프로젝트에 투자했을 때의 투자 이익값을 다음과 같이 구합니다.

// 각 프로젝트의 투자 이익값은 [프로젝트의 기대 이익값] + [하위 프로젝트의 투자 이익값 중 최댓값]
// 단, 최하위 프로젝트의 투자 이익값은 해당 프로젝트의 기대 이익값과 같습니다.
// 다음은 철수가 투자하려는 프로젝트의 예시입니다.

// investment_1.png

// 위 그림에서 원 안에 적힌 숫자는 프로젝트 번호를, 사각형 안에 적힌 숫자는 각 프로젝트의 기대 이익값을 나타냅니다. 항상 1번 프로젝트가 철수가 투자하려는 최상위 프로젝트입니다. 1번 프로젝트는 2, 3, 4번의 하위 프로젝트를 가지며, 3번 프로젝트는 5, 6번의 하위 프로젝트를 가지고, 4번 프로젝트는 7번의 하위 프로젝트를 가집니다. 각 프로젝트의 투자 이익값을 구하는 예시는 다음과 같습니다.

// 2, 5, 6, 7번 프로젝트의 투자 이익값 = 프로젝트의 기대 이익값(각각 11, 9, 15, 17)
// 3번 프로젝트의 투자 이익값 = 기대 이익값(8) + 하위 프로젝트의 투자 이익값 중 최댓값(15) = 23
// 4번 프로젝트의 투자 이익값 = 기대 이익값(5) + 하위 프로젝트의 투자 이익값 중 최댓값(17) = 22
// 1번 프로젝트의 투자 이익값 = 기대 이익값(10) + 하위 프로젝트의 투자 이익값 중 최댓값(23) = 33
// 따라서 위 예시의 경우 최상위 프로젝트의 투자 이익값은 33이 됩니다.

// 각 프로젝트의 기대 이익값이 번호 순서대로 담긴 배열 value, 프로젝트의 관계가 담긴 2차원 배열 projects가 매개변수로 주어질 때, 최상위 프로젝트의 투자 이익값을 return 하도록 solution 함수를 완성해주세요.

// 제한사항
// 전체 프로젝트개수는 value의 길이와 같습니다.
// value의 길이는 2 이상 10,000 이하입니다.
// value의 원소는 1 이상 10,000 이하인 자연수입니다.
// 모든 프로젝트에는 1부터 value의 길이에 해당하는 숫자까지 하나씩 번호가 붙어있습니다.
// 기대 이익값은 프로젝트 번호가 증가하는 순서대로 배열에 담겨있습니다.
// projects의 길이는 [value의 길이 - 1] 입니다.
// projects의 각 원소는 [a, b]형태입니다.
// b가 a의 하위 프로젝트 임을 나타냅니다.
// 1번 프로젝트가 항상 최상위 프로젝트입니다.

function solution(value, projects) {
  let answer = Array.from({ length: value.length }, () => []);

  for (let i = 0; i < answer.length; i++) {
    if (!projects.find((v) => v[0] === i + 1)) answer[i] = value[i];
  }

  projects.forEach((v) => answer[v[0] - 1].push(v[1]));

  for (let i = answer.length - 1; i >= 0; i--) {
    if (typeof answer[i] !== "number") {
      answer[i] =
        answer[i].reduce(
          (acc, cur) => (answer[cur - 1] > acc ? answer[cur - 1] : acc),
          0
        ) + value[i];
    }
  }

  return answer[0];
}

console.log(
  solution(
    [10, 11, 8, 5, 9, 15, 17],
    [
      [1, 2],
      [1, 3],
      [1, 4],
      [3, 5],
      [3, 6],
      [4, 7],
    ]
  )
);
