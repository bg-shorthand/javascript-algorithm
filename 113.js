// n x n 행렬 모양의 지도에 마법을 사용하여, 몬스터를 가능한 많이 없애려고 합니다. 아래 그림은 7 x 7 크기의 지도에서, 녹색으로 표시된 목표점(5, 4)에 공격력(p)=19, 범위(r)=6인 마법을 사용하여 17마리의 몬스터를 해치운 경우입니다.

// 이스트소프트_마법공격_TC1.png

// 격자 내부의 숫자는 몬스터의 체력을 나타냅니다.
// 목표점(row, columns)은 지도에서 row번째 가로선과 columns번째 세로선이 만나는 곳입니다.
// 가장 위에 있는 가로선이 첫 번째 가로선, 가장 왼쪽에 있는 세로선이 첫 번째 세로선입니다.
// 위 그림에서, 목표점(5, 4)는 5번째 가로선과 4번째 세로선이 만나는 곳입니다.
// 목표점을 중심으로, 대각선 길이가 r인 정사각형을 45도 왼쪽으로 기울인 모양으로 마법이 사용됩니다.
// 위 그림에서, 대각선 길이가 6인 기울어진 빨간 정사각형 내부가 마법의 유효 범위입니다.
// 빨간 정사각형에 완전히 포함되는 노란 격자에 위치한 몬스터들은 공격력(p) 만큼 체력이 깎이게 됩니다.
// 위 그림에서, 노란 격자에 위치한 12마리의 몬스터들 중, 체력이 p(=19) 이하인 10마리를 해치울 수 있습니다.
// 빨간 정사각형에 절반만 포함되는 파란 격자에 위치한 몬스터들은 공격력의 절반(p/2)만큼 체력이 깎이게 됩니다.
// 위 그림에서, 파란 격자에 위치한 12마리의 몬스터들 중, 체력이 p/2(=9.5) 이하인 7마리를 해치울 수 있습니다.
// 몬스터가 배치된 지도의 정보 maps, 마법의 공격력 p, 마법의 범위 r이 매개변수로 주어집니다. 이때, 마법을 한 번 사용하여 없앨 수 있는 가장 많은 몬스터의 수를 return 하도록 solution 함수를 완성해주세요.

// 마법을 사용하는 목표점은 행렬의 가로선과 세로선이 만나는 점들 중 하나여야 합니다.
// 어떤 위치에 마법을 사용하더라도, 없앨 수 있는 몬스터가 없다면 0을 return 하도록 합니다.

function solution(maps, p, r) {
  var answer = 0;

  for (let i = 1; i <= maps.length; i++) {
    for (let j = 1; j <= maps.length; j++) {
      for (let k = i + 1 - r; k <= i + 1; k++) {
        if (maps.length - 1 < k < 0) continue;
        for (let l = i + 1 - r; l <= i + 1; l++) {
          if (maps.length - 1 < l < 0) continue;
        }
      }
    }
  }

  return answer;
}

console.log(
  solution(
    [
      [1, 28, 41, 22, 25, 79, 4],
      [39, 20, 10, 17, 19, 18, 8],
      [21, 4, 13, 12, 9, 29, 19],
      [58, 1, 20, 5, 8, 16, 9],
      [5, 6, 15, 2, 39, 8, 29],
      [39, 7, 17, 5, 4, 49, 5],
      [74, 46, 8, 11, 25, 2, 11],
    ],
    19,
    6
  )
);
